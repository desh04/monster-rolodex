{"version":3,"sources":["components/card/card.component.jsx","components/card-list/card-list.component.jsx","components/search-box/search-box.component.jsx","App.js","reportWebVitals.js","index.js"],"names":["Card","props","className","alt","src","monster","id","name","email","CardList","monsters","map","SearchBox","placeholder","handleChange","type","onChange","App","e","setState","searchField","target","value","state","fetch","then","response","json","users","catch","error","console","log","this","filteredMonsters","filter","toLowerCase","includes","class","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"2TAKaA,EAAO,SAACC,GAAD,OAChB,sBAAKC,UAAU,iBAAf,UACI,qBACIC,IAAI,UACJC,IAAG,+BAA0BH,EAAMI,QAAQC,GAAxC,4BAEP,6BAAKL,EAAMI,QAAQE,OACnB,4BAAKN,EAAMI,QAAQG,YCJdC,G,MAAW,SAAAR,GAAK,OAEzB,aAF0C,CAE1C,OAAKC,UAAU,YAAf,SACKD,EAAMS,SAASC,KAAI,SAAAN,GAAO,OACvB,cAAC,EAAD,CAAuBA,QAASA,GAArBA,EAAQC,WCRlBM,G,MAAY,SAAC,GAAD,IAAGC,EAAH,EAAGA,YAAcC,EAAjB,EAAiBA,aAAjB,OAErB,uBACIZ,UAAY,SACZa,KAAK,SACLF,YAAcA,EACdG,SAAWF,MCoEJG,G,wDApEb,aAAe,IAAD,8BACZ,gBA+BFH,aAAe,SAACI,GACd,EAAKC,SAAS,CAACC,YAAaF,EAAEG,OAAOC,SA9BrC,EAAKC,MAAQ,CACXb,SAAU,CACR,CACEH,KAAM,cACND,GAAG,WAEL,CACEC,KAAM,UACND,GAAI,YAGRc,YAAa,IAdH,E,qDAwBd,WAAqB,IAAD,OAClBI,MAAM,8CACLC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAK,OAAI,EAAKT,SAAS,CAAET,SAAUkB,OACxCC,OAAM,SAAAC,GAAK,OAAIC,QAAQC,IAAI,wC,oBAQ9B,WACE,MAAkCC,KAAKV,MAA/Bb,EAAR,EAAQA,SAAUU,EAAlB,EAAkBA,YAIZc,EAAmBxB,EAASyB,QAAO,SAAA9B,GAAO,OAC7CA,EAAQE,KAAK6B,cAAcC,SAASjB,EAAYgB,kBAGnD,OACE,sBAAKlC,UAAU,MAAf,UACE,oBAAIoC,MAAM,cAAV,6BACA,cAAC,EAAD,CACEzB,YAAY,iBACZC,aAAemB,KAAKnB,eAUtB,cAAC,EAAD,CAAUJ,SAAUwB,W,GA7DVK,cCGHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBjB,MAAK,YAAkD,IAA/CkB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.53267399.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nimport './card.styles.css';\r\n\r\n// Card component responsible of what comes under a card\r\nexport const Card = (props) => (\r\n    <div className='card-container'>\r\n        <img \r\n            alt='monster'\r\n            src={`https://robohash.org/${props.monster.id}?set=set2&size=180x180`} \r\n        />\r\n        <h1>{props.monster.name}</h1>\r\n        <p>{ props.monster.email }</p>\r\n    </div>\r\n)","import React from 'react';\r\n\r\nimport { Card } from '../card/card.component';\r\n\r\nimport './card-list.style.css';\r\n\r\n\r\n//CardList compoenet is reponsible for how cards are arranged\r\nexport const CardList = props => (            // props have method children which are\r\n                                            // any thing that has been passed between the <CardList> and </CardList> in the App.js file\r\n    <div className='card-list'>\r\n        {props.monsters.map(monster => (\r\n            <Card key={monster.id} monster={monster} />\r\n        ))}\r\n    </div>\r\n);","import React from 'react';\r\n\r\nimport './search-box.style.css';\r\n\r\nexport const SearchBox = ({ placeholder , handleChange }) => (\r\n\r\n    <input \r\n        className = 'search'\r\n        type='search' \r\n        placeholder={ placeholder } \r\n        onChange={ handleChange } \r\n        /* if want to do something immediately after setting setstate then will need to pass\r\n        that inside the setState funtion other wise there will be delay due to Asyn operation .\r\n        this.setState({searchField: e.target.value}, () => console.log(this.state)) */\r\n        /* console.log(this.state); if access the state outside it will be one step back , not will be immediate change */ \r\n         \r\n    />/*e represent Synthetic Event. synthetic event will have lot of method. We will user 'target value method'*/\r\n    /*'target' method can give us value of the target. Will give us HTML value*/\r\n    /* .value will give us the value typed . and that we will store in the 'searchFeild' of state */\r\n)","import React, { Component } from 'react';\n\nimport { CardList } from './components/card-list/card-list.component';\nimport { SearchBox } from './components/search-box/search-box.component';\n\nimport './App.css';\n\n\n\nclass App extends Component {\n  constructor() {\n    super();\n\n    this.state = {\n      monsters: [                        //Doesn't need the data inside this cause fetch the data\n        {\n          name: 'Frankestein',\n          id:'unique1'\n        },\n        {\n          name: 'Dracula',\n          id: 'unique2'\n        },\n      ],\n      searchField: ''                 // will strore value from the input search box\n    };\n\n    // this.handleChange = this.handleChange.bind(this); // this will be need to be done if we were be creating \n    // a function names handleChange and then we will be needing to provide the \"this\" key word to that function \n    // Javascript by default doesn't set scope of \"this\" to funtion . \n    // or we could just use the arrow funtion that will have the \"this\" access using Lexsosopuic scope\n\n  }  \n\n  componentDidMount() {                                     // using componentDidMount method, which we have access to because of Component class\n    fetch('https://jsonplaceholder.typicode.com/users')     // fetching from this url // fetch returns a Promise value while it's makes an API resques to url\n    .then(response => response.json())                            //response.json method convert the reponse to json formate\n    .then(users => this.setState({ monsters: users}))              // setting the monster to the user // fetching the data to states Monster properties. \n    .catch(error => console.log('error in getting value from API')); // if API url fetching fails\n  }\n\n\n  handleChange = (e) => {\n    this.setState({searchField: e.target.value});\n  }\n\n  render() {\n    const { monsters, searchField } = this.state;   {/* This is Destructuring. Pulling properties of an object and set them to const variable */}\n    {/*Above line equivalen to \n    const monsters = this.state.monster;\n    const searchFeild = this.state.searchFeild*/}\n    const filteredMonsters = monsters.filter(monster =>\n       monster.name.toLowerCase().includes(searchField.toLowerCase())\n      );\n\n    return (\n      <div className='App'>\n        <h1 class=\"headingFont\">Monster Rolodex</h1>\n        <SearchBox\n          placeholder='Search Monster'\n          handleChange={ this.handleChange }\n        /> \n        {/* if want to do something immediately after setting setstate then will need to pass\n        that inside the setState funtion other wise there will be delay due to Asyn operation .\n        this.setState({searchField: e.target.value}, () => console.log(this.state)) */}\n        {/* console.log(this.state); if access the state outside it will be one step back , not will be immediate change */} \n        \n        {/*e represent Synthetic Event. synthetic event will have lot of method. We will user 'target value method'*/}\n        {/*'target' method can give us value of the target. Will give us HTML value*/}\n        {/* .value will give us the value typed . and that we will store in the 'searchFeild' of state */}   \n        <CardList monsters={filteredMonsters} />   \n      </div>\n    );\n  }\n  \n}\n\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}